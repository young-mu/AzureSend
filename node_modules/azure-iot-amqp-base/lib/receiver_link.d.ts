/// <reference types="node" />
import { EventEmitter } from 'events';
import { results } from 'azure-iot-common';
import { AmqpMessage } from './amqp_message';
import { AmqpLink } from './amqp_link_interface';
/**
 * @private
 * State machine used to manage AMQP receiver links
 *
 * @extends {EventEmitter}
 * @implements {AmqpLink}
 *
 * @fires ReceiverLink#message
 * @fires ReceiverLink#error
 */
export declare class ReceiverLink extends EventEmitter implements AmqpLink {
    private _linkAddress;
    private _linkOptions;
    private _linkObject;
    private _fsm;
    private _amqp10Client;
    private _detachHandler;
    private _errorHandler;
    private _messageHandler;
    constructor(linkAddress: string, linkOptions: any, amqp10Client: any);
    detach(callback: (err?: Error) => void): void;
    forceDetach(err?: Error): void;
    attach(callback: (err?: Error) => void): void;
    accept(message: AmqpMessage, callback?: (err?: Error, result?: results.MessageCompleted) => void): void;
    /**
     * @deprecated Use accept(message, callback) instead (to adhere more closely to the AMQP10 lingo).
     */
    complete(message: AmqpMessage, callback?: (err?: Error, result?: results.MessageCompleted) => void): void;
    reject(message: AmqpMessage, callback?: (err?: Error, result?: results.MessageRejected) => void): void;
    abandon(message: AmqpMessage, callback?: (err?: Error, result?: results.MessageAbandoned) => void): void;
    private _removeListeners();
    private _safeCallback(callback, error?, result?);
}
